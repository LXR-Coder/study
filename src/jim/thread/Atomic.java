package jim.thread;

import java.util.concurrent.atomic.AtomicLong;

/**
 * @Author jim
 * @Date 2021/4/8
 **/
public class Atomic {

    private static AtomicLong atomicLong = new AtomicLong();

    private static Integer[] arrayOne = new Integer[]{0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0};
    private static Integer[] arrayTwo = new Integer[]{10,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0,1,2,3,4,5,6,0,56,0};

    public static void main(String[] args) throws InterruptedException {
        Thread threadOne = new Thread(()->{
            int size = arrayOne.length;
            for (int i = 0; i < size ; i++) {
                if(arrayOne[i].intValue()==0){
                    atomicLong.incrementAndGet();
                }
            }
        });

        Thread threadTwo = new Thread(()->{
            int size = arrayTwo.length;
            for (int i = 0; i < size ; i++) {
                if(arrayTwo[i].intValue()==0){

                    atomicLong.incrementAndGet();

                }
            }
        });

        threadOne.start();
        threadTwo.start();

        threadOne.join();
        threadTwo.join();

        System.out.println("count 0:"+atomicLong.get());
    }


}
